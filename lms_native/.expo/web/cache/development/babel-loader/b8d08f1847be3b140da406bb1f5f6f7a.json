{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/opt/lampp/htdocs/codi/LMS/lms_native/Take_Attendance.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { DataTable } from 'react-native-paper';\nimport API from \"./api\";\nimport Attendance from \"./components/Attendance\";\nimport Classroom from \"./components/Classroom\";\nimport Section from \"./components/Section\";\nexport default function Take_Attendance() {\n  var _this = this;\n\n  var _useState = useState({\n    students: [],\n    attendance: {},\n    showSubmit: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      updateState = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      attendance = _useState4[0],\n      setAttendance = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      section = _useState6[0],\n      setSection = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      classroom = _useState8[0],\n      setClassroom = _useState8[1];\n\n  var today = new Date();\n  var year = today.getFullYear();\n  var month = today.getMonth() + 1;\n  var day = today.getDate();\n  if (month < 10) month = \"0\" + month;\n  if (day < 10) day = \"0\" + day;\n  var date = year + '-' + month + '-' + day;\n  var filter = {\n    section: section,\n    classroom: classroom\n  };\n\n  var fetchdata = function fetchdata() {\n    return _regeneratorRuntime.async(function fetchdata$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setState({\n              attendance: {}\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(API.post(\"stu-sec-class\").then(function (res) {\n              var result = res.data.data;\n              var data = result.filter(function (s) {\n                return s.section_id == section;\n              });\n\n              if (data) {\n                data.map(function (s) {\n                  var attendance = state.attendance;\n                  attendance[s.id] = \"Present\";\n                  setState({\n                    attendance: attendance\n                  });\n                });\n              }\n\n              setState({\n                students: data\n              });\n            }));\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(API.get(\"attendance\").then(function (res) {\n              var result = res.data.data;\n              var update = result.filter(function (a) {\n                return a.created_at.slice(0, 10) == date && a.section_id == section;\n              });\n\n              if (update && update.length) {\n                update.map(function (s) {\n                  var attendance = state.attendance;\n                  attendance[s.student_id] = s.description;\n                  setState({\n                    attendance: attendance\n                  });\n                });\n              }\n            }));\n\n          case 5:\n            if (classroom == \"\") setSection(\"\");\n            checkSubmit();\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var checkSubmit = function checkSubmit() {\n    section != \"\" ? setState({\n      showSubmit: true\n    }) : setState({\n      showSubmit: false\n    });\n  };\n\n  var setState = function setState(nextState) {\n    updateState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), nextState);\n    });\n    console.log(state, filter);\n  };\n\n  var changeDescription = function changeDescription(key, val) {\n    var attendance = state.attendance;\n    attendance[key] = val;\n    setState({\n      attendance: attendance\n    });\n  };\n\n  var submitAttendance = function submitAttendance() {\n    var updateFunction, createFunction;\n    return _regeneratorRuntime.async(function submitAttendance$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            updateFunction = function updateFunction(update) {\n              var _loop, i;\n\n              return _regeneratorRuntime.async(function updateFunction$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _loop = function _loop(i) {\n                        var student, key, reqBody, att, id;\n                        return _regeneratorRuntime.async(function _loop$(_context2) {\n                          while (1) {\n                            switch (_context2.prev = _context2.next) {\n                              case 0:\n                                student = state.students[i];\n                                key = student.id;\n                                reqBody = {\n                                  description: state.attendance[key],\n                                  section_id: section,\n                                  student_id: key\n                                };\n                                att = update.find(function (a) {\n                                  return a.student_id == key;\n                                });\n                                id = att.id;\n                                _context2.next = 7;\n                                return _regeneratorRuntime.awrap(API.put(\"attendance/\" + id, reqBody));\n\n                              case 7:\n                              case \"end\":\n                                return _context2.stop();\n                            }\n                          }\n                        }, null, null, null, Promise);\n                      };\n\n                      i = 0;\n\n                    case 2:\n                      if (!(i < state.students.length)) {\n                        _context3.next = 8;\n                        break;\n                      }\n\n                      _context3.next = 5;\n                      return _regeneratorRuntime.awrap(_loop(i));\n\n                    case 5:\n                      i++;\n                      _context3.next = 2;\n                      break;\n\n                    case 8:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            };\n\n            createFunction = function createFunction() {\n              return _regeneratorRuntime.async(function createFunction$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      state.students.map(function _callee(student) {\n                        var key, reqBody;\n                        return _regeneratorRuntime.async(function _callee$(_context4) {\n                          while (1) {\n                            switch (_context4.prev = _context4.next) {\n                              case 0:\n                                key = student.id;\n                                reqBody = {\n                                  description: state.attendance[key],\n                                  section_id: section,\n                                  student_id: key\n                                };\n                                _context4.next = 4;\n                                return _regeneratorRuntime.awrap(API.post(\"attendance\", reqBody));\n\n                              case 4:\n                              case \"end\":\n                                return _context4.stop();\n                            }\n                          }\n                        }, null, null, null, Promise);\n                      });\n\n                    case 1:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            };\n\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(API.get(\"attendance\").then(function (res) {\n              var result = res.data.data;\n              var update = result.filter(function (a) {\n                return a.created_at.slice(0, 10) == date && a.section_id == section;\n              });\n\n              if (update && update.length) {\n                updateFunction(update);\n              } else {\n                createFunction();\n              }\n            }));\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchdata();\n  }, [JSON.stringify(filter)]);\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    className: \"helloclass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, React.createElement(Classroom, {\n    id: classroom,\n    onValueChange: setClassroom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }), React.createElement(Section, {\n    id: classroom,\n    onValueChange: setSection,\n    selectedValue: section,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: submitAttendance,\n    style: {\n      display: state.showSubmit ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, \"Submit\"))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, React.createElement(DataTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, React.createElement(DataTable.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, React.createElement(DataTable.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }, \"ID\"), React.createElement(DataTable.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 25\n    }\n  }, \"Name\"), React.createElement(DataTable.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 25\n    }\n  }, \"Class\"), React.createElement(DataTable.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }, \"Attendance\")), state.students.map(function (student) {\n    return React.createElement(DataTable.Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, React.createElement(DataTable.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }, student.id), React.createElement(DataTable.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 29\n      }\n    }, student.fname, \" \", student.lname), React.createElement(DataTable.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }, student.classroom_name, \" \", student.section_name), React.createElement(DataTable.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    }, React.createElement(Attendance, {\n      name: \"attendance\",\n      id: state.attendance[student.id],\n      onValueChange: function onValueChange() {\n        return changeDescription(student.id, value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 33\n      }\n    })));\n  }))));\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/codi/LMS/lms_native/Take_Attendance.js"],"names":["React","useState","useEffect","DataTable","API","Attendance","Classroom","Section","Take_Attendance","students","attendance","showSubmit","state","updateState","setAttendance","section","setSection","classroom","setClassroom","today","Date","year","getFullYear","month","getMonth","day","getDate","date","filter","fetchdata","setState","post","then","res","result","data","s","section_id","map","id","get","update","a","created_at","slice","length","student_id","description","checkSubmit","nextState","prevState","console","log","changeDescription","key","val","submitAttendance","updateFunction","i","student","reqBody","att","find","put","createFunction","JSON","stringify","display","fname","lname","classroom_name","section_name","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, TouchableOpacity } from 'react-native';\nimport { DataTable } from 'react-native-paper';\nimport API from './api';\n\nimport Attendance from './components/Attendance';\nimport Classroom from './components/Classroom';\nimport Section from './components/Section';\n\nexport default function Take_Attendance() {\n\n    const [state, updateState] = useState({\n        students: [],\n        attendance: {},\n        showSubmit: false,\n    });\nconst[attendance,setAttendance]=useState({})\n    const [section, setSection] = useState(\"\");\n    const [classroom, setClassroom] = useState(\"\");\n\n    var today = new Date();\n    var year = today.getFullYear();\n    var month = (today.getMonth() + 1);\n    var day = today.getDate();\n\n    if (month < 10) month = \"0\" + month;\n    if (day < 10) day = \"0\" + day;\n\n    var date = year + '-' + month + '-' + day;\n\n    const filter = {\n        section: section,\n        classroom: classroom,\n    };\n\n    const fetchdata = async () => {\n\n        setState({ attendance: {} });\n\n        await API.post(`stu-sec-class`)\n            .then(res => {\n                const result = res.data.data;\n                const data = result.filter(s => s.section_id == section);\n                if (data) {\n                    data.map(s => {\n                        const attendance = state.attendance;\n                        attendance[s.id] = \"Present\";\n                        setState({ attendance: attendance });\n                    });\n                }\n                setState({ students: data });\n            });\n\n        await API.get(`attendance`)\n            .then(res => {\n                const result = res.data.data;\n                const update = result.filter(a =>\n                    (a.created_at.slice(0, 10) == date && a.section_id == section)\n                );\n                if (update && update.length) {\n                    update.map(s => {\n                        const attendance = state.attendance;\n                        attendance[s.student_id] = s.description;\n                        setState({ attendance: attendance });\n                    });\n                }\n            });\n\n        if (classroom == \"\") setSection(\"\");\n        checkSubmit();\n    }\n\n    const checkSubmit = () => {\n        (section != \"\") ? setState({ showSubmit: true }) : setState({ showSubmit: false });\n    }\n\n    const setState = (nextState) => {\n        updateState(prevState => ({\n            ...prevState,\n            ...nextState\n        }));\n        console.log(state, filter);\n    }\n\n    // const handleChange = e => {\n    //     let { name, value } = e.target;\n    //     setState({ [name]: value });\n    // }\n\n    const changeDescription = (key, val) => {\n        const attendance = state.attendance;\n        attendance[key] = val;\n        setState({ attendance: attendance });\n    }\n\n    const submitAttendance = async () => {\n\n        const updateFunction = async (update) => {\n            for (let i = 0; i < state.students.length; i++) {\n                let student = state.students[i];\n                let key = student.id;\n                let reqBody = {\n                    description: state.attendance[key],\n                    section_id: section,\n                    student_id: key\n                }\n                let att = update.find(a => a.student_id == key);\n                let id = att.id;\n\n                await API.put(`attendance/${id}`, reqBody);\n            }\n        }\n\n        const createFunction = async () => {\n            state.students.map(async (student) => {\n                let key = student.id;\n                let reqBody = {\n                    description: state.attendance[key],\n                    section_id: section,\n                    student_id: key\n                }\n                await API.post(`attendance`, reqBody);\n            });\n        }\n\n        await API.get(`attendance`)\n            .then(res => {\n                const result = res.data.data;\n                const update = result.filter(a =>\n                    (a.created_at.slice(0, 10) == date && a.section_id == section)\n                );\n                if (update && update.length) {\n                    updateFunction(update);\n                } else {\n                    createFunction();\n                }\n            });\n    }\n\n    useEffect(() => {\n        fetchdata();\n    }, [JSON.stringify(filter)]);\n\n\n    return (\n        <View>\n\n            <Text></Text>\n            <Text></Text>\n\n            <View>\n                <View className=\"helloclass\">\n                    <Classroom\n                        id={classroom}\n                        onValueChange={setClassroom}\n                    />\n                    <Section\n                        id={classroom}\n                        onValueChange={setSection}\n                        selectedValue={section}\n                    />\n                </View>\n\n                <TouchableOpacity\n                    onPress={submitAttendance}\n                    style={{ display: state.showSubmit ? 'block' : 'none' }}>\n                    <Text>Submit</Text>\n                </TouchableOpacity>\n            </View>\n\n            <View>\n                <DataTable>\n                    <DataTable.Header>\n                        <DataTable.Title>ID</DataTable.Title>\n                        <DataTable.Title>Name</DataTable.Title>\n                        <DataTable.Title>Class</DataTable.Title>\n                        <DataTable.Title>Attendance</DataTable.Title>\n                    </DataTable.Header>\n\n                    {state.students.map(student => (\n                        <DataTable.Row>\n                            <DataTable.Cell>{student.id}</DataTable.Cell>\n                            <DataTable.Cell>{student.fname} {student.lname}</DataTable.Cell>\n                            <DataTable.Cell>{student.classroom_name} {student.section_name}</DataTable.Cell>\n                            <DataTable.Cell>\n                                <Attendance\n                                    name=\"attendance\"\n                                    id={state.attendance[student.id]}\n                                    onValueChange={() => changeDescription(student.id, value)}\n                                />\n                            </DataTable.Cell>\n                        </DataTable.Row>\n                    ))}\n                </DataTable>\n            </View>\n        </View>\n    );\n}"]},"metadata":{},"sourceType":"module"}